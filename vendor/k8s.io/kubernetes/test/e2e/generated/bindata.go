// Code generated by go-bindata.
// sources:
// vendor/k8s.io/kubernetes/test/e2e/generated/gobindata_util.go
// vendor/k8s.io/kubernetes/test/e2e/generated/main.go
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vendorK8sIoKubernetesTestE2eGeneratedGobindata_utilGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x93\x5d\x8b\xdb\x48\x13\x85\xaf\xdd\xbf\xe2\xbc\x82\x10\x7b\x50\xe4\x79\xe7\x62\x59\x66\xc9\x85\x32\x1f\xac\x49\xd6\x5e\x6c\x67\x43\x58\xf6\xa2\x25\x95\xa4\x62\xda\x5d\x4a\x77\xcb\x8e\x08\xf9\xef\x4b\x4b\x63\x67\xc2\xde\x08\x44\x7d\x3d\x75\x4e\xf5\xf2\x4a\xdd\x49\x37\x38\x6e\xda\x80\x9b\xeb\xff\xff\x82\x7d\x4b\x78\xdf\x17\xe4\x2c\x05\xf2\xc8\xfb\xd0\x8a\xf3\x99\x52\x1f\xb8\x24\xeb\xa9\x42\x6f\x2b\x72\x08\x2d\x21\xef\x74\xd9\x12\x9e\x23\x29\xfe\x22\xe7\x59\x2c\x6e\xb2\x6b\xcc\x63\x42\xf2\x1c\x4a\x16\xbf\xa9\x41\x7a\x1c\xf4\x00\x2b\x01\xbd\x27\x84\x96\x3d\x6a\x36\x04\xfa\x5a\x52\x17\xc0\x16\xa5\x1c\x3a\xc3\xda\x96\x84\x13\x87\x76\x1c\xf2\xdc\x22\x53\x9f\x9f\x1b\x48\x11\x34\x5b\x68\x94\xd2\x0d\x90\xfa\x65\x16\x74\x50\x0a\x00\xda\x10\xba\xdb\xe5\xf2\x74\x3a\x65\x7a\xa4\xcc\xc4\x35\x4b\x33\x65\xf9\xe5\x87\xd5\xdd\xc3\x7a\xf7\xf0\xe6\x26\xbb\x56\xea\xa3\x35\xe4\x3d\x1c\x7d\xe9\xd9\x51\x85\x62\x80\xee\x3a\xc3\xa5\x2e\x0c\xc1\xe8\x13\xc4\x41\x37\x8e\xa8\x42\x90\xc8\x79\x72\x1c\xd8\x36\x29\xbc\xd4\xe1\xa4\x1d\xa9\x8a\x7d\x70\x5c\xf4\xe1\x27\x81\xce\x54\xec\xf1\x32\x41\x2c\xb4\x45\x92\xef\xb0\xda\x25\x78\x97\xef\x56\xbb\x54\x7d\x5a\xed\x7f\xdf\x7c\xdc\xe3\x53\xbe\xdd\xe6\xeb\xfd\xea\x61\x87\xcd\x16\x77\x9b\xf5\xfd\x6a\xbf\xda\xac\x77\xd8\x3c\x22\x5f\x7f\xc6\xfb\xd5\xfa\x3e\x05\x71\x68\xc9\x81\xbe\x76\x2e\xb2\x8b\x03\x47\xe9\xa8\xca\xd4\x8e\xe8\xa7\xe1\xb5\x4c\x30\xbe\xa3\x92\x6b\x2e\x61\xb4\x6d\x7a\xdd\x10\x1a\x39\x92\xb3\x6c\x1b\x74\xe4\x0e\xec\xa3\x79\x1e\xda\x56\xca\xf0\x81\x83\x0e\xe3\xff\x7f\xd6\xc9\xd4\xd5\x52\xa9\x4e\x97\x4f\x63\x13\xb2\xe4\x74\xa0\x4a\x29\x3e\x74\xe2\x02\x92\xa7\x5f\x7d\xc6\xb2\x7c\x32\xd2\x24\x4a\x2d\xaf\xd4\x96\x74\xb5\x71\xf7\x4c\x70\xa4\x2b\x0f\x3d\x19\x5f\x3b\x39\xa0\x91\x82\x6d\xa5\x83\xce\xd4\x96\x0c\x93\x47\x4b\xfa\xc8\x66\x88\x32\x8d\xdc\x7d\x59\x92\xf7\x75\x6f\xce\xb3\xe2\x8d\x49\x8d\xa2\x67\x53\x41\xbb\xc0\xb5\x2e\x83\x87\xf6\x71\x8f\xb1\xa6\x91\xdb\x33\x17\x2a\x76\x54\x06\x3e\x92\x87\x2e\xe4\x38\xe1\xd7\xbd\x2d\x71\xc1\x9a\x47\x9c\x3f\x75\x68\x11\x4d\xb2\xcd\x02\x7f\xff\x53\x0c\x81\xf0\x4d\xa9\x59\x8c\xbd\x1b\x02\xf9\x14\xe4\x1c\x6e\xdf\x22\xf7\x9e\xc2\xa5\x66\xa1\x66\x5c\x8f\xa1\xff\xbd\x85\x65\x83\x6f\x6a\x36\xbb\x6c\xf5\x87\x6f\x62\x49\x92\xdb\x98\x22\x0e\x52\x96\xbd\x73\x54\xa5\xe8\xc4\x7b\x2e\xcc\xf0\x43\x02\x54\x42\xde\xbe\x0e\x78\xb2\x72\x8a\xb4\x7d\x18\xd7\x19\xd5\x1a\xa4\x7f\xed\x08\xd2\x51\xb4\x2c\xc3\xa3\x38\x7c\xe9\xc9\x4f\x2e\x89\xc5\x41\xb3\x8d\x4f\x23\x1a\x7a\x69\x99\xa2\x14\x1b\x74\x39\x35\xf2\xdc\xbc\x09\xb1\x24\xa6\x38\xe9\xbb\x2c\x51\xb3\x59\x34\x2a\x5b\xd9\x5a\xea\x79\x92\x1f\x35\x9b\xf1\xf0\x7f\x50\xc5\xf1\xfe\x16\xaf\x8e\x48\xd2\x69\xf9\xb5\x3e\x90\x9f\x2f\x16\xe7\xe2\x47\x1d\xb4\xa9\xe7\xc9\xa3\x66\x13\x0f\x7c\x62\x8c\x15\xe9\xf4\x92\xa7\xdd\x5f\x1d\x33\xc4\x4f\x92\xe2\xac\xde\x28\x6a\x8a\x97\x7a\x2d\xd4\xec\xbb\x9a\x39\x0a\xbd\xb3\xb8\xa8\xaf\xbe\xab\x7f\x03\x00\x00\xff\xff\x7a\x4f\x7e\x5c\xae\x04\x00\x00")

func vendorK8sIoKubernetesTestE2eGeneratedGobindata_utilGoBytes() ([]byte, error) {
	return bindataRead(
		_vendorK8sIoKubernetesTestE2eGeneratedGobindata_utilGo,
		"vendor/k8s.io/kubernetes/test/e2e/generated/gobindata_util.go",
	)
}

func vendorK8sIoKubernetesTestE2eGeneratedGobindata_utilGo() (*asset, error) {
	bytes, err := vendorK8sIoKubernetesTestE2eGeneratedGobindata_utilGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vendor/k8s.io/kubernetes/test/e2e/generated/gobindata_util.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vendorK8sIoKubernetesTestE2eGeneratedMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\x41\x6b\xdb\x40\x10\x85\xef\xfb\x2b\x1e\x3e\xb5\xc1\x95\x5c\x43\x2f\xed\x49\x75\x5c\x2a\x12\x64\xb0\x94\x86\x1c\x57\xbb\x63\x69\xa8\xbc\xbb\xdd\x1d\x55\xf1\xbf\x2f\x52\x5c\x48\xc8\x71\x98\xc7\x7b\xdf\xcc\xcb\x6f\xd4\xce\x87\x4b\xe4\xae\x17\x6c\x37\x9f\xbf\xa0\xe9\x09\x77\x63\x4b\xd1\x91\x50\x42\x31\x4a\xef\x63\xca\x94\xba\x67\x43\x2e\x91\xc5\xe8\x2c\x45\x48\x4f\x28\x82\x36\x3d\xe1\xba\x59\xe3\x17\xc5\xc4\xde\x61\x9b\x6d\xf0\x61\x16\xac\xae\xab\xd5\xc7\x6f\xea\xe2\x47\x9c\xf5\x05\xce\x0b\xc6\x44\x90\x9e\x13\x4e\x3c\x10\xe8\xd9\x50\x10\xb0\x83\xf1\xe7\x30\xb0\x76\x86\x30\xb1\xf4\x4b\xc8\xd5\x22\x53\x4f\x57\x03\xdf\x8a\x66\x07\x0d\xe3\xc3\x05\xfe\xf4\x5a\x05\x2d\x4a\x01\x40\x2f\x12\xbe\xe6\xf9\x34\x4d\x99\x5e\x28\x33\x1f\xbb\x7c\x78\x51\xa5\xfc\xbe\xdc\xed\xab\x7a\xff\x69\x9b\x6d\x94\x7a\x70\x03\xa5\x84\x48\x7f\x46\x8e\x64\xd1\x5e\xa0\x43\x18\xd8\xe8\x76\x20\x0c\x7a\x82\x8f\xd0\x5d\x24\xb2\x10\x3f\x73\x4e\x91\x85\x5d\xb7\x46\xf2\x27\x99\x74\x24\x65\x39\x49\xe4\x76\x94\x37\x0f\xfa\x4f\xc5\x09\xaf\x05\xde\x41\x3b\xac\x8a\x1a\x65\xbd\xc2\xf7\xa2\x2e\xeb\xb5\x7a\x2c\x9b\x9f\x87\x87\x06\x8f\xc5\xf1\x58\x54\x4d\xb9\xaf\x71\x38\x62\x77\xa8\x6e\xcb\xa6\x3c\x54\x35\x0e\x3f\x50\x54\x4f\xb8\x2b\xab\xdb\x35\x88\xa5\xa7\x08\x7a\x0e\x71\x66\xf7\x11\x3c\xbf\x8e\x6c\xa6\x6a\xa2\x37\xe1\x27\xff\x02\x93\x02\x19\x3e\xb1\xc1\xa0\x5d\x37\xea\x8e\xd0\xf9\xbf\x14\x1d\xbb\x0e\x81\xe2\x99\xd3\x5c\x5e\x82\x76\x56\x0d\x7c\x66\xd1\xb2\xcc\xef\xce\xc9\xd4\x4d\xae\x54\xd0\xe6\xf7\x62\x42\x8e\xa2\x16\xb2\x4a\xe5\x39\x2a\x0f\xe3\xed\x72\xb1\x23\xb2\x64\xd1\x53\xa4\x0c\x68\xe6\xba\x39\x41\x23\xc9\xd8\x2e\x50\x73\xdb\x3c\x2c\x29\x08\x63\x0c\x3e\x51\xca\xd4\xbf\x00\x00\x00\xff\xff\x5d\x35\x80\xae\x93\x02\x00\x00")

func vendorK8sIoKubernetesTestE2eGeneratedMainGoBytes() ([]byte, error) {
	return bindataRead(
		_vendorK8sIoKubernetesTestE2eGeneratedMainGo,
		"vendor/k8s.io/kubernetes/test/e2e/generated/main.go",
	)
}

func vendorK8sIoKubernetesTestE2eGeneratedMainGo() (*asset, error) {
	bytes, err := vendorK8sIoKubernetesTestE2eGeneratedMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vendor/k8s.io/kubernetes/test/e2e/generated/main.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vendor/k8s.io/kubernetes/test/e2e/generated/gobindata_util.go": vendorK8sIoKubernetesTestE2eGeneratedGobindata_utilGo,
	"vendor/k8s.io/kubernetes/test/e2e/generated/main.go":           vendorK8sIoKubernetesTestE2eGeneratedMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vendor": {nil, map[string]*bintree{
		"k8s.io": {nil, map[string]*bintree{
			"kubernetes": {nil, map[string]*bintree{
				"test": {nil, map[string]*bintree{
					"e2e": {nil, map[string]*bintree{
						"generated": {nil, map[string]*bintree{
							"gobindata_util.go": {vendorK8sIoKubernetesTestE2eGeneratedGobindata_utilGo, map[string]*bintree{}},
							"main.go":           {vendorK8sIoKubernetesTestE2eGeneratedMainGo, map[string]*bintree{}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
